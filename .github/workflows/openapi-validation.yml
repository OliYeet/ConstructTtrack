name: OpenAPI Specification Validation

on:
  push:
    branches: [main, develop]
    paths:
      - 'docs/api/**'
      - 'apps/web/src/app/api/**'
      - '.github/workflows/openapi-validation.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'docs/api/**'
      - 'apps/web/src/app/api/**'
      - '.github/workflows/openapi-validation.yml'
  workflow_dispatch:
    inputs:
      skip_implementation_tests:
        description: 'Skip implementation tests (useful when API server is not available)'
        required: false
        default: 'false'
        type: boolean

jobs:
  validate-openapi-spec:
    name: Validate OpenAPI Specification
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2 # Fetch current and previous commit for diff

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Validate OpenAPI specification syntax
        run: |
          echo "üîç Validating OpenAPI specification syntax..."
          # Try global swagger-cli first, then local
          if command -v swagger-cli &> /dev/null; then
            swagger-cli validate docs/api/openapi.yaml
          else
            npx swagger-cli validate docs/api/openapi.yaml
          fi
          echo "‚úÖ OpenAPI specification is valid"

      - name: Run comprehensive OpenAPI validation
        run: |
          echo "üß™ Running comprehensive OpenAPI validation..."
          node scripts/validate-openapi.js

      - name: Generate API documentation
        run: |
          echo "üìö Generating API documentation..."
          npx @redocly/cli build-docs docs/api/openapi.yaml --output docs/api/index.html

      - name: Upload validation artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: openapi-validation-results
          path: |
            docs/api/validation/
            docs/api/index.html
          retention-days: 30

  validate-api-implementation:
    name: Validate API Implementation
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_implementation_tests }}
    needs: validate-openapi-spec

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: constructtrack_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Setup test environment
        run: |
          cp .env.example .env.test
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/constructtrack_test" >> .env.test
          echo "NODE_ENV=test" >> .env.test
          echo "API_BASE_URL=http://localhost:3001/api/v1" >> .env.test

      - name: Build application
        run: |
          npm run packages:build
          npm run build --workspace=apps/web

      - name: Start API server
        run: |
          npm run web:dev &
          echo $! > api_server.pid

          # Wait for server to be ready
          echo "‚è≥ Waiting for API server to start..."
          timeout 60 bash -c 'until curl -f http://localhost:3001/api/v1/health; do sleep 2; done'
          echo "‚úÖ API server is ready"
        env:
          NODE_ENV: test

      - name: Test API endpoints against specification
        run: |
          echo "üß™ Testing API implementation against OpenAPI spec..."
          node scripts/validate-api-implementation.js
        env:
          API_BASE_URL: http://localhost:3001/api/v1
          NODE_ENV: test

      - name: Stop API server
        if: always()
        run: |
          if [ -f api_server.pid ]; then
            kill $(cat api_server.pid) || true
            rm api_server.pid
          fi

      - name: Upload implementation test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: api-implementation-test-results
          path: docs/api/validation/
          retention-days: 30

  check-breaking-changes:
    name: Check for Breaking Changes
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history for comparison

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Get previous OpenAPI spec
        run: |
          # Get the OpenAPI spec from the base branch
          git show ${{ github.event.pull_request.base.sha }}:docs/api/openapi.yaml > docs/api/openapi.yaml.base
          echo "üìã Retrieved base OpenAPI specification"

      - name: Generate OpenAPI diff
        run: |
          echo "üîÑ Generating OpenAPI diff..."
          node scripts/openapi-diff.js docs/api/openapi.yaml.base
        continue-on-error: true

      - name: Check for breaking changes
        id: breaking_changes
        run: |
          if [ -f docs/api/validation/openapi-diff-*.json ]; then
            LATEST_DIFF=$(ls -t docs/api/validation/openapi-diff-*.json | head -n1)
            BREAKING_CHANGES=$(jq '.breakingChanges | length' "$LATEST_DIFF")
            echo "breaking_changes=$BREAKING_CHANGES" >> $GITHUB_OUTPUT
            
            if [ "$BREAKING_CHANGES" -gt 0 ]; then
              echo "‚ö†Ô∏è Breaking changes detected: $BREAKING_CHANGES"
              echo "breaking_changes_found=true" >> $GITHUB_OUTPUT
            else
              echo "‚úÖ No breaking changes detected"
              echo "breaking_changes_found=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "‚ùå Could not generate diff"
            echo "breaking_changes_found=unknown" >> $GITHUB_OUTPUT
          fi

      - name: Comment on PR with breaking changes warning
        if: steps.breaking_changes.outputs.breaking_changes_found == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Find the latest diff file
            const validationDir = 'docs/api/validation';
            const files = fs.readdirSync(validationDir).filter(f => f.startsWith('openapi-diff-') && f.endsWith('.json'));

            if (files.length > 0) {
              const latestDiff = files.sort().reverse()[0];
              const diffPath = path.join(validationDir, latestDiff);
              const diffData = JSON.parse(fs.readFileSync(diffPath, 'utf8'));
              
              const breakingChanges = diffData.breakingChanges || [];
              
              let comment = `## ‚ö†Ô∏è Breaking Changes Detected\n\n`;
              comment += `This PR introduces **${breakingChanges.length} breaking change(s)** to the API specification.\n\n`;
              comment += `### Breaking Changes:\n`;
              
              breakingChanges.forEach((change, index) => {
                comment += `${index + 1}. **${change.type || 'Change'}** at \`${change.location || 'unknown'}\`\n`;
                comment += `   ${change.description || change.message || 'No description'}\n\n`;
              });
              
              comment += `### Recommendations:\n`;
              comment += `- üî¥ Consider incrementing the major version (e.g., v1.0.0 ‚Üí v2.0.0)\n`;
              comment += `- üìö Provide a migration guide for API consumers\n`;
              comment += `- üîÑ Consider maintaining backward compatibility\n\n`;
              comment += `### Review Required:\n`;
              comment += `Please review these changes carefully and ensure they are intentional.\n`;
              comment += `Breaking changes should be well-documented and communicated to API consumers.\n\n`;
              comment += `<details>\n<summary>View full diff report</summary>\n\n`;
              comment += `\`\`\`json\n${JSON.stringify(diffData, null, 2)}\n\`\`\`\n\n</details>`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

      - name: Upload diff results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: openapi-diff-results
          path: docs/api/validation/
          retention-days: 30

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: |
          echo "üîí Running security audit..."
          npm audit --audit-level moderate

      - name: Scan OpenAPI spec for security issues
        run: |
          echo "üîç Scanning OpenAPI specification for security issues..."
          # Check for common security issues in OpenAPI spec

          # Check if HTTPS is enforced
          if ! grep -q "https://" docs/api/openapi.yaml; then
            echo "‚ö†Ô∏è Warning: No HTTPS servers defined in OpenAPI spec"
          fi

          # Check for security schemes
          if ! grep -q "securitySchemes:" docs/api/openapi.yaml; then
            echo "‚ö†Ô∏è Warning: No security schemes defined in OpenAPI spec"
          fi

          # Check for security requirements
          if ! grep -q "security:" docs/api/openapi.yaml; then
            echo "‚ö†Ô∏è Warning: No security requirements defined in OpenAPI spec"
          fi

          echo "‚úÖ Security scan completed"

  generate-documentation:
    name: Generate Documentation
    runs-on: ubuntu-latest
    needs: [validate-openapi-spec]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Generate API documentation
        run: |
          echo "üìö Generating API documentation..."
          npx @redocly/cli build-docs docs/api/openapi.yaml --output docs/api/index.html

      - name: Deploy documentation to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/api
          destination_dir: api-docs

      - name: Comment on commit with documentation link
        if: github.ref == 'refs/heads/main'
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const sha = context.sha;

            github.rest.repos.createCommitComment({
              owner,
              repo,
              commit_sha: sha,
              body: `üìö API documentation has been updated and deployed to: https://${owner}.github.io/${repo}/api-docs/`
            });
